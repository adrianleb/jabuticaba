// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    _this = this;

  Jabuticaba.Views.Marcel = (function(_super) {

    __extends(Marcel, _super);

    function Marcel() {
      return Marcel.__super__.constructor.apply(this, arguments);
    }

    Marcel.prototype.template = JST['marcel'];

    Marcel.prototype.el = "body";

    Marcel.prototype.events = {
      'click #send': 'send',
      'click #open-room': 'openRoom',
      'click #join-room': 'joinRoom',
      'click #generate-sound': 'generateSound'
    };

    Marcel.prototype.roomName = 'room-15';

    Marcel.prototype.initialize = function() {
      var _this = this;
      this.incommingContext = new webkitAudioContext();
      this.outputContext = new webkitAudioContext();
      window.marcel = this;
      console.debug('init marcelzz');
      console.log('hai');
      this.room = new DataChannel();
      this.peerCon2();
      this.room.onopen = function(user_id) {
        return console.log('onopen: ' + user_id);
      };
      this.room.onUserLeft = function(user_id) {
        return console.log('onUserLeft: ' + user_id);
      };
      this.room.onmessage = function(msg) {
        var d;
        console.log('msg', msg);
        _this.$('#messages').append(msg);
        d = Base64Binary.decodeArrayBuffer(msg);
        return console.log('hai', d);
      };
      this.render();
      return this.incommingBuffer = null;
    };

    Marcel.prototype.render = function() {
      return this.$el.html(this.template());
    };

    Marcel.prototype.send = function(e) {
      nop(e);
      console.log(sound);
      cl('sending: ' + $('#msg').val());
      return this.room.send($('#msg').val());
    };

    Marcel.prototype.openRoom = function(e) {
      nop(e);
      return this.room.open(this.roomName);
    };

    Marcel.prototype.joinRoom = function(e) {
      nop(e);
      return this.room.connect(this.roomName);
    };

    Marcel.prototype.generateSound = function(e) {
      nop(e);
      cl('nonono: 99999');
      this.o = this.outputContext.createOscillator();
      console.log('pa');
      this.g = this.outputContext.createGainNode();
      this.g.gain = 1;
      console.log('ra');
      this.peer = this.outputContext.createMediaStreamDestination();
      console.log('ti');
      this.o.connect(this.g);
      this.g.connect(this.peer);
      this.g.connect(this.outputContext.destination);
      this.pc1.addStream(this.peer.stream);
      this.o.noteOn(0);
      return console.log('yolo', this.pc1);
    };

    Marcel.prototype.createPeerConnection = function() {
      var gotDescription1,
        _this = this;
      this.pc1 = new webkitRTCPeerConnection({
        iceServers: [
          {
            url: "stun:stun.l.google.com:19302"
          }
        ]
      });
      this.pc1.onicecandidate = function(e) {
        var candidate;
        if (!marcel.pc1 || !e || !e.candidate) {
          return false;
        }
        console.debug("onicecandidate");
        candidate = e.candidate;
        return marcel.pc1.addIceCandidate(new RTCIceCandidate({
          sdpMLineIndex: candidate.sdpMLineIndex,
          candidate: candidate.candidate
        }));
      };
      this.pc1.onaddstream = function() {
        return console.debug("onaddstream");
      };
      gotDescription1 = function(desc) {
        console.log('hai description', desc);
        _this.pc1.setLocalDescription(desc);
        return _this.offer = desc;
      };
      this.pc1.createOffer(gotDescription1, null, {
        'mandatory': {
          'OfferToReceiveAudio': true,
          'OfferToReceiveVideo': true
        }
      });
      return console.log(this.offer, 'offer');
    };

    Marcel.prototype.connectToPeerConnection = function() {
      var desc, gotDescription2,
        _this = this;
      console.log(this.offer);
      desc = new RTCSessionDescription(this.offer);
      gotDescription2 = function(desc) {
        return _this.pc1.setRemoteDescription(desc);
      };
      return this.pc1.createAnswer(gotDescription2, null, {
        'mandatory': {
          'OfferToReceiveAudio': true,
          'OfferToReceiveVideo': true
        }
      });
    };

    Marcel.prototype.peerCon2 = function() {
      var _this = this;
      this.pc1 = new webkitRTCPeerConnection({
        iceServers: [
          {
            url: "stun:stun.l.google.com:19302"
          }
        ]
      });
      this.pc2 = new webkitRTCPeerConnection({
        iceServers: [
          {
            url: "stun:stun.l.google.com:19302"
          }
        ]
      });
      this.pc2.onaddstream = function() {
        return console.debug("onaddstream");
      };
      this.pc1.onicecandidate = function(candidate) {
        return _this.pc2.addIceCandidate(candidate);
      };
      this.pc2.onicecandidate = function(candidate) {
        return _this.pc1.addIceCandidate(candidate);
      };
      return this.pc1.createOffer(onOfferCreated, rtcOnError);
    };

    return Marcel;

  })(Backbone.View);

  window.rtcOnError = function(err) {
    return window.alert(err.message);
  };

  window.onPc1RemoteDescriptionSet = function() {
    return window.alert('Yay, we finished signaling offers and answers');
  };

  window.onPc2LocalDescriptionSet = function() {
    return marcel.pc1.setRemoteDescription(marcel.answer, onPc1RemoteDescriptionSet, rtcOnError);
  };

  window.onOfferCreated = function(description) {
    console.log('desc?', description);
    marcel.offer = description.sdp;
    return marcel.pc1.setLocalDescription(marcel.offer, onPc1LocalDescriptionSet, rtcOnError);
  };

  window.onAnswerCreated = function(description) {
    marcel.answer = description.sdp;
    return marcel.pc2.setLocalDescription(marcel.answer, onPc2LocalDescriptionSet, rtcOnError);
  };

  window.onPc2RemoteDescriptionSet = function() {
    return marcel.pc2.createAnswer(onAnswerCreated, rtcOnError);
  };

  window.onPc1LocalDescriptionSet = function() {
    return marcel.pc2.setRemoteDescription(marcel.offer, onPc2RemoteDescriptionSet, rtcOnError);
  };

}).call(this);
